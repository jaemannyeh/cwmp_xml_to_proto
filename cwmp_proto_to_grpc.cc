//
// c++ cwmp_proto_to_grpc.cc -o cwmp_proto_to_grpc -std=c++11 `pkg-config --cflags --libs protobuf`
//
// ./cwmp_proto_to_grpc tr-098-1-8-0-full.proto > tr-098.proto
//
// protoc -I ./ --cpp_out=. tr-098.proto
// g++ -std=c++11 -I/usr/local/include -pthread  -c -o tr-098.pb.o tr-098.pb.cc
//
// protoc -I ./ --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` tr-098.proto
// g++ -std=c++11 -I/usr/local/include -pthread  -c -o tr-098.grpc.pb.o tr-098.grpc.pb.cc
//
// g++ -std=c++11 -I/usr/local/include -pthread  -c -o board_client.o board_client.cc
// g++ tr-098.pb.o tr-098.grpc.pb.o board_client.o -L/usr/local/lib `pkg-config --libs grpc++` -Wl,--no-as-needed -lgrpc -lgrpc++_reflection -Wl,--as-needed -lprotobuf -lpthread -ldl -o board_client
// g++ -std=c++11 -I/usr/local/include -pthread  -c -o board_server.o board_server.cc
// g++ tr-098.pb.o tr-098.grpc.pb.o board_server.o -L/usr/local/lib `pkg-config --libs grpc++` -Wl,--no-as-needed -lgrpc -lgrpc++_reflection -Wl,--as-needed -lprotobuf -lpthread -ldl -o board_server
// rm tr-098.pb.cc tr-098.grpc.pb.cc
//
// jaemannyeh
//

#include <iostream>
#include <iomanip>      // std::setw
#include <fstream>
#include <string>
#include <map>
#include <algorithm>

#include <google/protobuf/compiler/importer.h>

using namespace std;

static void find_and_replace(string& source, string const& find, string const& replace) {
  for(string::size_type i = 0; (i = source.find(find, i)) != string::npos;) {
    source.replace(i, find.length(), replace);
    i += replace.length();
  }
}

static ofstream service_methods;

static string the_service_name;

static void add_service_method(const string& slash2, const google::protobuf::FieldDescriptor *field, const google::protobuf::Descriptor* desc) {
  
  std::string argument1;
  std::string argument2;
  if (field && field->is_repeated()) {
    argument1 = "ServerReader<" + desc->full_name() + ">";
    argument2 = "ServerWriter<" + desc->full_name() + ">";
  } else {
    argument1 = desc->full_name();
    argument2 = desc->full_name();
  }
  find_and_replace(argument1,".","::");
  find_and_replace(argument2,".","::");
  
  service_methods << slash2 << "Status Get" << desc->name() << "(ServerContext* context, const " 
        << the_service_name << "Request* request, " 
        << argument2 << "* reply"
        << ") override { return Status::OK; }" << endl;
  service_methods << slash2 << "Status Set" << desc->name() << "(ServerContext* context, const "
        << argument1 << "* request, "
        << the_service_name << "Reply* reply) override { return Status::OK; }" << endl;
  service_methods << endl;  
}

static int cwmp_proto_walk_tree(const google::protobuf::Descriptor* the_desc) {

  static const google::protobuf::Descriptor* root_desc = NULL;
  static string desc_names;
  
  if (root_desc == NULL) {
    root_desc = the_desc;
    desc_names += "Get"+root_desc->name()+" "; 
    cout << "  " << "rpc Get" << root_desc->name() << "(" << the_service_name << "Request" << ")" << " returns (" << root_desc->full_name() << ") {}" << endl;
    cout << "  " << "rpc Set" << root_desc->name() << "(" << root_desc->full_name() << ")" << " returns (" << the_service_name << "Reply" << ") {}" << endl;
    cout << endl;
    
    add_service_method("  ", NULL, root_desc);
  }
  
  for (int i=0; i<the_desc->field_count(); i++) {
    
    const google::protobuf::FieldDescriptor *field = the_desc->field(i);
    const google::protobuf::Descriptor* desc= field->message_type(); // If type is TYPE_MESSAGE or TYPE_GROUP, ....

    if (desc) { // if (field->cpp_type() == 10)
      std::string message;
      if (field->is_repeated()) {
        message = "stream " + desc->full_name();
      } else {
        message = desc->full_name();
      }
      
      string slash2;
      if (desc_names.find("Get"+desc->name()+" ") == string::npos) {
        desc_names += "Get"+desc->name()+" ";        
        slash2 = "  ";
      } else {
        slash2 = "  //?? ";
      }
      
      cout << slash2 << "rpc Get" << desc->name() << "(" << the_service_name << "Request" << ")" << " returns (" << message << ") {}" << endl;
      cout << slash2 << "rpc Set" << desc->name() << "(" << message << ")" << " returns (" << the_service_name << "Reply" << ") {}" << endl;
      cout << endl;
      
      add_service_method(slash2, field, desc);

      cwmp_proto_walk_tree(desc);
    } 

  }

  return 0;  
}

static int cwmp_proto_to_grpc(const char *cwmp_proto_file_name,string& service_name) {
  
  google::protobuf::compiler::DiskSourceTree source_tree;
  source_tree.MapPath("", ".");
	google::protobuf::compiler::Importer importer(&source_tree,NULL);
	const google::protobuf::FileDescriptor* fd = importer.Import(cwmp_proto_file_name); // auto fd = importer.Import(cwmp_proto_file_name);
	assert(fd);	
	assert(fd->service_count()==0);
	assert(fd->message_type_count()==1); // Number of top-level message types defined in this file.

  cout << "// Generated by " << __FILE__ << endl;
  cout << "// source: " << fd->name() << endl;
  cout << "// 1st top-level message: " << fd->message_type(0)->name() << endl;
  cout << "// Added service " <<  endl;
  cout << endl;
  
  ifstream f(fd->name());
  cout << f.rdbuf();
  cout << endl;
  f.close();
  
  string methods_name(fd->name());
  methods_name.erase(methods_name.rfind(".proto"));  
  methods_name += ".methods";
  service_methods.open(methods_name);
  service_methods << "// Generated by " << __FILE__ << endl;
  service_methods << "// source: " << fd->name() << endl;
  service_methods << "// Use this file to implement gRPC server's service methods." << endl;
  service_methods << endl;
  
  the_service_name = service_name;

  cout << "message " << the_service_name << "Request { int32 unused = 1; }" << endl << endl;
  cout << "message " << the_service_name << "Reply { int32 unused = 1; }" << endl << endl;
  cout << "message " << "X_012345_Message { int32 unused = 1;  } // Vendor extensions X_{OUI}_{NameOfNewThing}" << endl << endl;
    
  cout << "service " << the_service_name << " {" << endl;
  cwmp_proto_walk_tree(fd->message_type(0)); // 1st in top-level messages types defined in this file.
  cout << "}" << endl;
  
  return 0;    
}

int main(int argc,char *argv[]) {

  if (argc == 3) {
    std::string option("--service_name=");
    std::string argv_1(argv[1]);
    size_t found = argv_1.find(option);
    if (found == 0) {
      string service_name = argv_1.substr(found+option.size());
      if (!service_name.empty()) {
        cwmp_proto_to_grpc(argv[2],service_name);
        return 0;
      }
    }    
  }
  
  cout << "usage: cwmp_proto_to_grpc --service_name=Gateway tr-069-1-0-0-full.proto > tr-069.proto" << endl;
  
  return -1;
}